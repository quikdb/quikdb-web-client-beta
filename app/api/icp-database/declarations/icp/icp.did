type Time = int;
type Result_7 = 
 variant {
   err: QuikDBError;
   ok: opt DataGroup;
 };
type Result_6 = 
 variant {
   err: QuikDBError;
   ok: opt Database;
 };
type Result_5 = 
 variant {
   err: QuikDBError;
   ok: opt Project;
 };
type Result_4 = 
 variant {
   err: QuikDBError;
   ok: Item;
 };
type Result_3 = 
 variant {
   err: QuikDBError;
   ok: text;
 };
type Result_2 = 
 variant {
   err: QuikDBError;
   ok: DataGroup;
 };
type Result_1 = 
 variant {
   err: QuikDBError;
   ok: Database;
 };
type Result = 
 variant {
   err: QuikDBError;
   ok: Project;
 };
type QuikDBError = 
 variant {
   DataGroupNotFound: text;
   EncryptionError: text;
   GeneralError: text;
   ItemNotFound: text;
   ProjectNotFound: text;
   ValidationError: text;
 };
type Project = 
 record {
   createdAt: Time;
   createdBy: principal;
   description: text;
   name: text;
   projectId: nat;
 };
type Item = 
 record {
   createdAt: Time;
   key: text;
   updatedAt: Time;
   value: blob;
 };
type Database = 
 record {
   createdAt: Time;
   createdBy: principal;
   databaseId: nat;
   name: text;
   projectId: nat;
 };
type DataGroup = 
 record {
   createdAt: Time;
   createdBy: principal;
   databaseId: nat;
   groupId: nat;
   name: text;
   projectId: nat;
 };
service : {
  /// Adds or updates multiple items in the store.
  /// 
  /// # Arguments
  /// 
  /// * `items` - A list of tuples containing keys and their corresponding values to be stored.
  /// 
  /// # Returns
  /// 
  /// A list of `Result.Result` indicating the success or failure of each operation.
  createBatchItems: (vec record {
                           text;
                           blob;
                         }) -> (Result_3);
  /// Creates a new database, ensuring the total number of dataGroups does not exceed the limit.
  /// 
  /// This function attempts to create a new database with the specified name, description,
  /// and creator's principal. If the number of dataGroups has already reached the maximum limit,
  /// the function returns `null`.
  /// 
  /// # Arguments
  /// 
  /// * `databaseId` - The unique identifier of the database.
  /// * `projectId` - The unique identifier of the project within the dataGroup.
  /// * `groupCount` - The number of data groups to be created within the database.
  /// * `groupName` - The name of the dataGroup to be created.
  /// * `createdBy` - The `Principal` of the user creating the dataGroup.
  /// 
  /// # Returns
  /// 
  /// An optional `DataGroup.DataGroup` object representing the newly created dataGroup.
  /// Returns `ErrorTypes.QuikDBError` if the dataGroup creation limit has been reached or an error occurs.
  createDataGroup: (nat, nat, nat, text, text) -> (Result_7);
  /// Creates a new database, ensuring the total number of databases does not exceed the limit.
  /// 
  /// This function attempts to create a new database with the specified name, description,
  /// and creator's principal. If the number of databases has already reached the maximum limit,
  /// the function returns `null`.
  /// 
  /// # Arguments
  /// 
  /// * `projectId` - The unique identifier for the new database.
  /// * `count` - The database identifier, must be be between 1 and 5.
  /// * `dbName` - The name of the database to be created.
  /// * `createdBy` - The `Principal` of the user creating the database.
  /// 
  /// # Returns
  /// 
  /// An optional `Database.Database` object representing the newly created project.
  /// Returns `null` if the project creation limit has been reached or an error occurs.
  createDatabase: (nat, nat, text, text) -> (Result_6);
  /// Creates a new project, ensuring the total number of projects does not exceed the limit.
  /// 
  /// This function attempts to create a new project with the specified name, description,
  /// and creator's principal. If the number of projects has already reached the maximum limit,
  /// the function returns `null`.
  /// 
  /// # Arguments
  /// 
  /// * `name` - The name of the project to be created.
  /// * `description` - A brief description of the project.
  /// * `createdBy` - The `Principal` of the user creating the project.
  /// 
  /// # Returns
  /// 
  /// An optional `Project.Project` object representing the newly created project.
  /// Returns `ErrorTypes.QuikDBError` if the project creation limit has been reached or an error occurs.
  createProject: (text, text, text) -> (Result_5);
  /// Deletes an item from the store by its key.
  /// 
  /// This function removes the item with the specified `key` from the store.
  /// 
  /// # Arguments
  /// 
  /// * `key` - The unique identifier of the item to delete.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` indicating success with a message "Deleted" or failure with an `ErrorTypes.QuikDBError`.
  /// 
  /// - Returns `#ok("Deleted")` if the item was successfully deleted.
  /// - Returns `#err(#ValidationError("Key not found"))` if no item with the specified key exists.
  deleteItem: (text) -> (Result_3);
  /// Generates a unique ID for a specified entity.
  /// 
  /// This function generates a unique identifier by incrementing the project counter
  /// and combining it with a prefix specific to the entity type.
  /// 
  /// # Arguments
  /// 
  /// * `entity` - The name of the entity for which the ID is being generated.
  /// 
  /// # Returns
  /// 
  /// A `Text` value representing the generated unique ID.
  generateId: (text, nat) -> (text) query;
  /// Retrieves multiple items from the store.
  /// 
  /// # Arguments
  /// 
  /// * `keys` - A list of keys to retrieve items for.
  /// 
  /// # Returns
  /// 
  /// A list of `Result.Result` containing the item if found, or an error if not.
  getBatchItems: (vec text) -> (vec Result_4) query;
  /// Retrieves all dataGroups currently stored in the system.
  /// 
  /// This function returns an array of all `DataGroup.DataGroup` objects stored in the `dataGroups` array.
  /// 
  /// # Returns
  /// 
  /// An array of `DataGroup.DataGroup` objects.
  getDataGroups: () -> (vec DataGroup) query;
  /// Retrieves all databases currently stored in the system.
  /// 
  /// This function returns an array of all `Database.Database` objects stored in the `databases` array.
  /// 
  /// # Returns
  /// 
  /// An array of `Database.Database` objects.
  getDatabases: () -> (vec Database) query;
  /// Retrieves an item from the store by its key.
  /// 
  /// This function searches the store for an item with the specified `key`.
  /// 
  /// # Arguments
  /// 
  /// * `key` - The unique identifier of the item to retrieve.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` containing the `GroupItemStore.Item` if found, or an `ErrorTypes.QuikDBError` if not found.
  /// 
  /// - Returns `#ok(item)` if the item was found.
  /// - Returns `#err(#ValidationError("Key not found"))` if no item with the specified key exists.
  getItem: (text) -> (Result_4) query;
  /// Retrieves all projects currently stored in the system.
  /// 
  /// This function returns an array of all `Project.Project` objects stored in the `projects` array.
  /// 
  /// # Returns
  /// 
  /// An array of `Project.Project` objects.
  getProjects: () -> (vec Project) query;
  /// Lists all keys currently stored in the store.
  /// 
  /// This function returns an array of all keys present in the store.
  /// 
  /// # Returns
  /// 
  /// An array of `Text` values representing all keys stored.
  listAllKeys: () -> (vec text) query;
  /// Inserts or updates an item in the store.
  /// 
  /// This function attempts to insert a new item into the store with the given `key` and `value`.
  /// If an item with the specified `key` already exists, it updates the item's value.
  /// 
  /// # Arguments
  /// 
  /// * `key` - The unique identifier for the item to be stored or updated.
  /// * `value` - The data to be stored, represented as a `Blob`.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` indicating success with a message ("Created" or "Updated") or failure with an `ErrorTypes.QuikDBError`.
  /// 
  /// - Returns `#ok("Created")` if the item was successfully created.
  /// - Returns `#ok("Updated")` if the item was successfully updated.
  /// - Returns `#err(#ValidationError(...))` if validation checks fail (e.g., empty value or value exceeds size limit).
  putItem: (text, blob) -> (Result_3);
  /// Updates the details of an existing data group.
  /// 
  /// This function allows modifying the `name` of an existing data group.
  /// It performs necessary validations to ensure that the data group exists
  /// and that the new data provided is valid.
  /// 
  /// # Arguments
  /// 
  /// * `dataGroupId` - The unique identifier of the data group to be updated.
  /// * `newName` - The new name for the data group.
  /// * `updatedBy` - The `Principal` of the user updating the data group.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` containing the updated `DataGroup.DataGroup` object if successful,
  /// or an `ErrorTypes.QuikDBError` if the data group is not found or validations fail.
  updateDataGroup: (nat, text, text) -> (Result_2);
  /// Updates the details of an existing database.
  /// 
  /// This function allows modifying the `name` of an existing database.
  /// It performs necessary validations to ensure that the database exists
  /// and that the new data provided is valid.
  /// 
  /// # Arguments
  /// 
  /// * `databaseId` - The unique identifier of the database to be updated.
  /// * `newName` - The new name for the database.
  /// * `updatedBy` - The `Principal` of the user updating the database.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` containing the updated `Database.Database` object if successful,
  /// or an `ErrorTypes.QuikDBError` if the database is not found or validations fail.
  updateDatabase: (nat, text, text) -> (Result_1);
  /// Updates the details of an existing project.
  /// 
  /// This function allows modifying the `name` and `description` of an existing project.
  /// It performs necessary validations to ensure that the project exists and that the new
  /// data provided is valid.
  /// 
  /// # Arguments
  /// 
  /// * `projectId` - The unique identifier of the project to be updated.
  /// * `newName` - The new name for the project.
  /// * `newDescription` - The new description for the project.
  /// * `updatedBy` - The `Principal` of the user updating the project.
  /// 
  /// # Returns
  /// 
  /// A `Result.Result` containing the updated `Project.Project` object if successful,
  /// or an `ErrorTypes.QuikDBError` if the project is not found or validations fail.
  updateProject: (nat, text, text, text) -> (Result);
}
